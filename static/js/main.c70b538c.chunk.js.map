{"version":3,"sources":["logo.svg","containers/randomizer/index.js","App.js","reportWebVitals.js","index.js"],"names":["Randomizer","useState","allData","setAllData","dataInUse","setDataInUse","inputValue","setInptValue","selectedData","setSelectedData","toggleSettings","setToggleSettings","mode","setMode","className","src","logo","alt","onClick","temp","currentData","Math","floor","random","length","index","indexOf","setTimeout","splice","value","onChange","e","target","autoFocus","placeholder","temp1","temp2","push","map","data","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c70b538c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState } from 'react';\r\nimport logo from '../../logo.svg';\r\nimport './randomizer.css';\r\n\r\nfunction Randomizer() {\r\n  const [allData, setAllData] = useState([]);\r\n  const [dataInUse, setDataInUse] = useState([]);\r\n  const [inputValue, setInptValue] = useState(\"\")\r\n  const [selectedData, setSelectedData] = useState(\"Randomizer\")\r\n  const [toggleSettings, setToggleSettings] = useState(true)\r\n  const [mode, setMode] = useState(\"withReplacement\")\r\n\r\n  const handleInputChange = (e) => {\r\n    setInptValue(e.target.value)\r\n  }\r\n  const addnput = () => {\r\n    if (inputValue) {\r\n      const temp1 = [...allData]\r\n      const temp2 = [...dataInUse]\r\n      temp1.push(inputValue)\r\n      temp2.push(inputValue)\r\n      setAllData(temp1)\r\n      setDataInUse(temp2)\r\n      setInptValue(\"\")\r\n    }\r\n  }\r\n  const randomize = () => {\r\n    setSelectedData(\"\")\r\n    const temp = [...dataInUse]\r\n    const random = Math.floor(Math.random() * (temp.length))\r\n    //  Math.floor(Math.random() * (temp.length - 0 + 1) + 0)\r\n    const currentData = temp[random]\r\n\r\n    const index = temp.indexOf(currentData);\r\n    if (temp.length) {\r\n      setTimeout(() => {\r\n        setSelectedData(currentData)\r\n      }, 1200);\r\n    } else {\r\n      setSelectedData(\"Randomizer\")\r\n    }\r\n    if (mode === \"withReplacement\" && (index > -1)) {\r\n      temp.splice(index, 1);\r\n    }\r\n    setDataInUse(temp)\r\n  }\r\n  const reset = () => {\r\n    setAllData([])\r\n    setDataInUse([])\r\n    setInptValue(\"\")\r\n    setSelectedData(\"Randomizer\")\r\n    setToggleSettings(false)\r\n  }\r\n  const resetDataInUse = () => {\r\n    const temp = [...allData]\r\n    setDataInUse(temp)\r\n  }\r\n  return (\r\n    <div className=\"Randomizer\">\r\n      <h1 className=\"p1 result flex\">\r\n        {selectedData ? selectedData : <img src={logo} className=\"App-logo\" alt=\"logo\" />}\r\n      </h1 >\r\n      <button className=\"p1\" onClick={randomize}>Randomizer</button>\r\n      <br />\r\n      <br />\r\n      <div className={`${toggleSettings ? \"b1-white p1\" : null}`} >\r\n        <button className=\"p1\" onClick={() => setToggleSettings(!toggleSettings)}>{toggleSettings ? \"Minimize Settings\" : \"Expand  Settings\"}</button>\r\n        <br />\r\n        <br />\r\n        {toggleSettings ? <>\r\n          <label> Mode: &nbsp;\r\n            <select className=\"p1\" value={mode} onChange={(e) => setMode(e.target.value)}>\r\n              <option className=\"p1\" value=\"withReplacement\">With Replacement</option>\r\n              <option className=\"p1\" value=\"withoutReplacement\">Without Replacement</option>\r\n            </select>\r\n          </label>\r\n          <br />\r\n          <br />\r\n          <div>\r\n            <input className=\"p1 mr2\" value={inputValue} onChange={handleInputChange} autoFocus placeholder=\"Type Something Here!\" />\r\n            <button className=\"p1 mr2\" onClick={addnput}>Add</button>\r\n            <button className=\"p1\" onClick={reset}>Reset</button>\r\n          </div>\r\n        </> : null}\r\n      </div>\r\n      {/* {mode===\"withReplacement\"? */}\r\n      <div>\r\n        <div className=\"flex\">\r\n          <p className=\"mr2\">Data In Use</p>\r\n          <button onClick={resetDataInUse}>Reset</button>\r\n        </div>\r\n        <div className=\"b1-white flex\">\r\n          {dataInUse.map((data, index) => <span key={index} className=\"p1\">{data}</span>)}\r\n        </div>\r\n      </div>\r\n      {/* :null} */}\r\n      <div>\r\n        <p>All Data</p>\r\n        <div className=\"b1-white flex\">\r\n          {allData.map((data, index) => <span key={index} className=\"p1\">{data}</span>)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Randomizer;\r\n","\nimport Randomizer from './containers/randomizer';\nimport './App.css';\n\nconst App=()=> {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">        \n        <Randomizer/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}